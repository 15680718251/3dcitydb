-- <?xml version = '1.0' encoding = 'UTF-8'?>
-- <procedure xmlns="http://xmlns.oracle.com/jdeveloper/1112/offlinedb">
--   <properties>
--     <entry>
--       <key>OfflineDBConstants.IMPORT_SOURCE_CONNECTION</key>
--       <value class="java.lang.String">3DcityDB</value>
--     </entry>
--     <entry>
--       <key>OfflineDBConstants.IMPORT_SOURCE_ID</key>
--       <value class="oracle.javatools.db.ReferenceID">
--         <name>ACCEPTPLANNINGBDY</name>
--         <identifier class="java.math.BigDecimal">114490</identifier>
--         <schemaName>YAO</schemaName>
--         <type>PROCEDURE</type>
--       </value>
--     </entry>
--   </properties>
-- </procedure>

CREATE OR REPLACE
PROCEDURE AcceptPlanningBdy(
  planningId NUMBER,
  acceptedAlternativeId NUMBER,
  outStatus OUT NUMBER,
  outMessage OUT VARCHAR2
)

IS
  -- lokale Variablen
  workspaceName VARCHAR2(30);
  planningCount NUMBER;
  planningStatus NUMBER;
  isValidPlanningAlternative NUMBER;
  planningDiscardException EXCEPTION;
  planningCountException EXCEPTION;
  planningStatusException EXCEPTION;
  invalidAlternativeException EXCEPTION;

BEGIN
  -- Abragen der Existenz und des Status der Planung
  checkPlanning(planningId, planningCount, planningStatus);

  -- Prüfen, ob die angegeben Planungsalternative zu dieser Planung gehört und
  -- noch nicht beendet ist.
  SELECT COUNT(id) INTO isValidPlanningalternative
  FROM planning_alternative
  WHERE termination_date IS NULL AND planning_id = planningId AND id = acceptedAlternativeId;

  IF planningCount = 1 THEN   -- Planung existiert
    IF planningStatus = 1 THEN  -- Planung noch aktiv
      IF isValidPlanningalternative = 1 THEN   -- Planungsalternative gültig
        -- Abfragen des Workspacenamen der akzeptierten Alternative
        SELECT workspace_name INTO workspaceName
        FROM planning_alternative
        WHERE id = acceptedAlternativeId;

        -- Konflikte müssen in einem Anwendungsprogramm gelöst werden!
        DBMS_WM.MergeWorkspace(workspaceName);

        -- die Planung und ihre Alternativen beenden
        DiscardPlanningBdy(planningId, outStatus, outMessage);

        IF outStatus = 1 THEN   -- Planung fehlerfrei beendet
          COMMIT;
          setOutParameter(1, NULL, outStatus, outMessage);
        ELSE
          RAISE planningDiscardException;
        END IF;

      ELSE   -- Alternative ungültig
        RAISE invalidAlternativeException;
      END IF;

    ELSE   -- Planung bereits beendet
      RAISE planningStatusException;
    END IF;

  ELSE   -- Planung existiert nicht
    RAISE planningCountException;
  END IF;

EXCEPTION
  WHEN planningDiscardException THEN
    setOutParameter(0, '3D-Geo-DB: Planung fehlerhaft beendet', outStatus, outMessage);
  WHEN invalidAlternativeException THEN
    setOutParameter(0, '3D-Geo-DB: Planungsalternative ungültig', outStatus, outMessage);
  WHEN planningCountException THEN
    setOutParameter(0, '3D-Geo-DB: Planung existiert nicht', outStatus, outMessage);
  WHEN planningStatusException THEN
    setOutParameter(0, '3D-Geo-DB: Planung ist bereits beendet', outStatus, outMessage);
  WHEN OTHERS THEN
    setOutParameter(0, sqlerrm, outStatus, outMessage);

END;
/
